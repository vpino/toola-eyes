# -*- python -*-
# ex: set syntax=python:

####### Config Generic 

c = BuildmasterConfig = {}

c['status'] = []

c['slaves'] = []

c['change_source'] = []

c['schedulers'] = []

c['builders'] = []

c['buildbotURL'] = 'http://localhost:8010/'


# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

forced_builders = []


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'].append(BuildSlave("mirror", "11"))


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'].append(
            GitPoller(
                repourl="https://user:password@gitlab.com/user/repo.git",
                project= "geekos-buildbot",
                branches=["master"],
                pollinterval=60)
            )


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.steps.shell import SetPropertyFromCommand, ShellCommand
from buildbot.process.properties import WithProperties, Interpolate
from buildbot.process.factory import BuildFactory


builder = 'geekos-buildbot'

all_steps = [
        ShellCommand(command = 'echo "Hi Geekos"'),
    ]

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory

c['builders'].append(
        BuilderConfig(
            name=builder, 
            factory=BuildFactory(all_steps), 
            slavenames='mirror'
            )
        )

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter


sbched = SingleBranchScheduler(
        name=builder,
        change_filter = filter.ChangeFilter(project=builder, 
                            branch='master'
                            ),
        treeStableTimer = 10,
        builderNames = [builder])

c['schedulers'].append(sbched)

forced_builders.append(builder)

#And now we created a ForceScheduler that contain all forced builders:
forced_scheduler = ForceScheduler(
                    name='Forzar', 
                    builderNames = forced_builders
                    )

# And we add the force_builders to the schedulers:
c['schedulers'].append(forced_scheduler)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)

c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Geekos-Buildbot"
c['titleURL'] = "https://geekos.ve/sabe"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
